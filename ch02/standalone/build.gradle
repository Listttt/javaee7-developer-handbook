/*******************************************************************************
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2013,2014 by Peter Pilgrim, Addiscombe, Surrey, XeNoNiQUe UK
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL v3.0
 * which accompanies this distribution, and is available at:
 * http://www.gnu.org/licenses/gpl-3.0.txt
 *
 * Developers:
 * Peter Pilgrim -- design, development and implementation
 *               -- Blog: http://www.xenonique.co.uk/blog/
 *               -- Twitter: @peter_pilgrim
 *
 * Contributors:
 *
 *******************************************************************************/

archivesBaseName = 'ch02-cdi-standalone'

dependencies {    
    // Weld for Java SE

    // 'org.apache.deltaspike.cdictrl:deltaspike-cdictrl-api:1.0.0'
    // 'org.jboss.weld.se:weld-se-core:3.0.0.Alpha14'

    compile     "javax:javaee-api:${javaeeVersion}"

    compile     "org.jboss.weld.se:weld-se-core:${weldSEVersion}"
    compile     "org.slf4j:slf4j-simple:${slf4jVersion}"
    compile     "org.apache.deltaspike.cdictrl:deltaspike-cdictrl-api:${deltaspikeVersion}"
    compile     "org.apache.deltaspike.cdictrl:deltaspike-cdictrl-weld:${deltaspikeVersion}"

}

// See also https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
test {
    // jvmArgs '-XX:MaxPermSize=768m'
    
    testLogging.showStandardStreams = true


    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "768m"

    // Ensure that the working directory for the test is the same as the project directory in order to run the Spike Delta container tests
    // *PP* 11/02/2016
    workingDir = project.projectDir
}

task(run, dependsOn: 'classes', type: JavaExec) {
    description = 'Runs the main application'
    main = 'je7hb.standalone.HelloWorld'
    classpath = sourceSets.main.runtimeClasspath
    args 'Mary', 'Peter', 'Jane'
}

task(generateScript, dependsOn: 'classes') {
    description = 'Generates UNIX bash script that launches the program.'
    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        // Not Microsoft Windows
        new File("HelloWorld").withWriter { out ->
            out.println("#!/bin/bash")
            out.println("java -cp ${sourceSets.main.runtimeClasspath.getAsPath()}  je7hb.standalone.HelloWorld")
        }
        "chmod 755 HelloWorld".execute()
    }
}

// fini
